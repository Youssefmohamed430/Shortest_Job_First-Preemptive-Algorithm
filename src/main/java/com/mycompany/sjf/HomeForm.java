package com.mycompany.sjf;
import com.mycompany.sjf.Process;
import java.awt.List;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author youss
 */
public class HomeForm extends javax.swing.JFrame {
     DefaultTableModel model;
     int number;
     static final int MAX_PROCESSES = 100;

    /**
     * Creates new form HomeForm
     */
    public HomeForm() {
        initComponents();
        ProcessId.setText("1");
        ProcessId.setEditable(false);
        ArrivalTime.setEditable(false);
        BurstTime.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Right = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        Left = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ProcessId = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        ArrivalTime = new javax.swing.JTextField();
        BurstTime = new javax.swing.JTextField();
        AddProcessInTable = new javax.swing.JButton();
        RunAlgorithm = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        NumberofProcess = new javax.swing.JTextField();
        Confirmnumber = new javax.swing.JButton();
        ShowGanttChartButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Right.setBackground(new java.awt.Color(0, 51, 102));
        Right.setMinimumSize(new java.awt.Dimension(400, 600));
        Right.setPreferredSize(new java.awt.Dimension(400, 500));

        jLabel6.setFont(new java.awt.Font("SimSun", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Table");

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N.Process", "Arrival T", "Burst T", "Turnaround T", "Waiting T ", "Response T"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setOpaque(false);
        Table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(Table);

        javax.swing.GroupLayout RightLayout = new javax.swing.GroupLayout(Right);
        Right.setLayout(RightLayout);
        RightLayout.setHorizontalGroup(
            RightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RightLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(339, 339, 339))
            .addGroup(RightLayout.createSequentialGroup()
                .addGap(392, 392, 392)
                .addComponent(jLabel5)
                .addContainerGap(98, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RightLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        RightLayout.setVerticalGroup(
            RightLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RightLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel6)
                .addGap(76, 76, 76)
                .addComponent(jLabel5)
                .addGap(107, 107, 107)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Left.setBackground(new java.awt.Color(255, 255, 255));
        Left.setMinimumSize(new java.awt.Dimension(400, 600));

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("ProcessId");

        jLabel3.setBackground(new java.awt.Color(102, 102, 102));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Arrival Time");

        ProcessId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ProcessId.setForeground(new java.awt.Color(102, 102, 102));

        jLabel8.setBackground(new java.awt.Color(102, 102, 102));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Burst Time");

        ArrivalTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ArrivalTime.setForeground(new java.awt.Color(102, 102, 102));

        BurstTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        BurstTime.setForeground(new java.awt.Color(102, 102, 102));
        BurstTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BurstTimeActionPerformed(evt);
            }
        });

        AddProcessInTable.setBackground(new java.awt.Color(0, 51, 102));
        AddProcessInTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        AddProcessInTable.setForeground(new java.awt.Color(255, 255, 255));
        AddProcessInTable.setText("Add Process");
        AddProcessInTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddProcessInTableActionPerformed(evt);
            }
        });

        RunAlgorithm.setBackground(new java.awt.Color(0, 51, 102));
        RunAlgorithm.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        RunAlgorithm.setForeground(new java.awt.Color(255, 255, 255));
        RunAlgorithm.setText("Run Algorithm");
        RunAlgorithm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RunAlgorithmActionPerformed(evt);
            }
        });

        jLabel1.setText("Number of Processes");

        NumberofProcess.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        NumberofProcess.setForeground(new java.awt.Color(102, 102, 102));
        NumberofProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberofProcessActionPerformed(evt);
            }
        });

        Confirmnumber.setBackground(new java.awt.Color(0, 51, 102));
        Confirmnumber.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        Confirmnumber.setForeground(new java.awt.Color(255, 255, 255));
        Confirmnumber.setText("Confirm");
        Confirmnumber.setToolTipText("");
        Confirmnumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConfirmnumberActionPerformed(evt);
            }
        });

        ShowGanttChartButton.setBackground(new java.awt.Color(0, 51, 102));
        ShowGanttChartButton.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ShowGanttChartButton.setForeground(new java.awt.Color(255, 255, 255));
        ShowGanttChartButton.setText("Show Gantt Chart");
        ShowGanttChartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowGanttChartButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LeftLayout = new javax.swing.GroupLayout(Left);
        Left.setLayout(LeftLayout);
        LeftLayout.setHorizontalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftLayout.createSequentialGroup()
                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(NumberofProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(LeftLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(BurstTime, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(LeftLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel3))
                            .addGroup(LeftLayout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(ProcessId, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(LeftLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)))
                    .addGroup(LeftLayout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(Confirmnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(LeftLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addGroup(LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShowGanttChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RunAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(LeftLayout.createSequentialGroup()
                        .addGap(129, 129, 129)
                        .addComponent(AddProcessInTable, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        LeftLayout.setVerticalGroup(
            LeftLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LeftLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(NumberofProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(Confirmnumber, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ProcessId, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(ArrivalTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(28, 28, 28)
                .addComponent(BurstTime, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(AddProcessInTable, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(RunAlgorithm, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ShowGanttChartButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jLabel4.setBackground(new java.awt.Color(0, 51, 102));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 51, 102));
        jLabel4.setText("Shortest Job Firset (Preemptive)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(Right, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Left, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Left, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Right, javax.swing.GroupLayout.DEFAULT_SIZE, 696, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BurstTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BurstTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BurstTimeActionPerformed

    private void AddProcessInTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddProcessInTableActionPerformed
        // TODO add your handling code here:
        if(Integer.parseInt(ArrivalTime.getText()) < 0 || BurstTime.getText().isEmpty() || Integer.parseInt(BurstTime.getText()) <= 0)
        {
            JOptionPane.showMessageDialog(this, "Invalid Inputs");
            ClearFields();
        }
        else
        {
            model = (DefaultTableModel) Table.getModel();
            AddToTable();
            ClearFields();
            IncrementId();
            number--;
            if(number == 0)
            {
                ProcessId.setEditable(false);
                ArrivalTime.setEditable(false);
                BurstTime.setEditable(false);
            }  
        }       
    }//GEN-LAST:event_AddProcessInTableActionPerformed

    private void RunAlgorithmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RunAlgorithmActionPerformed
        // TODO add your handling code here:
        int rowCount = model.getRowCount(); 
        
        ArrayList<Process> processList = new ArrayList<Process>();
        
        for(int i = 0 ; i < rowCount;i++)
        {
            Process process = new Process();
            
            process.pid = Integer.parseInt(model.getValueAt(i, 0).toString());
            process.arrival = Integer.parseInt(model.getValueAt(i, 1).toString());
            process.burst = Integer.parseInt(model.getValueAt(i, 2).toString());
            process.turnaround_time = Integer.parseInt(model.getValueAt(i, 3).toString());
            process.waiting_time = Integer.parseInt(model.getValueAt(i, 4).toString());
            process.respone_time = Integer.parseInt(model.getValueAt(i, 5).toString());
            
            processList.add(process);
        }
        
        SJFAlgo(processList);
                
        double avgResponse = calculate_respone_times(processList);
        
        double avgturnaround = calculate_turnaround_times(processList);
        
        calculate_waiting_times(processList);
        
        double avgWaiting = calculate_average(processList);
        
        processList.sort((a,b) -> Integer.compare(a.burst, b.burst));
        
        SeaderTableData(processList);
        
        new NewJFrame(Double.toString(avgturnaround)
                ,Double.toString(avgWaiting)
                ,Double.toString(avgResponse))
                .setVisible(true);
        
    }//GEN-LAST:event_RunAlgorithmActionPerformed
    
    private void SeaderTableData(ArrayList<Process> processlist)
    {
        for(int i = 0 ; i < processlist.size();i++)
        {
            model.setValueAt(processlist.get(i).pid, i,0);
            model.setValueAt(processlist.get(i).arrival, i,1);
            model.setValueAt(processlist.get(i).burst, i,2);
            model.setValueAt(processlist.get(i).turnaround_time, i,3);
            model.setValueAt(processlist.get(i).waiting_time, i,4);
            model.setValueAt(processlist.get(i).respone_time, i,5);
        }
    }
    
    private void NumberofProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumberofProcessActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumberofProcessActionPerformed

    private void ConfirmnumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConfirmnumberActionPerformed
        // TODO add your handling code here:
        number = Integer.parseInt(NumberofProcess.getText());
        if(number <= 0 || NumberofProcess.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(this, "Invalid Number Of Processes");
            NumberofProcess.setText("");
        }
        else
        {
            ProcessId.setEditable(true);
            ArrivalTime.setEditable(true);
            BurstTime.setEditable(true);
        }
    }//GEN-LAST:event_ConfirmnumberActionPerformed

    private void ShowGanttChartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowGanttChartButtonActionPerformed
        // TODO add your handling code here: // Create a list of processes from the table data
            ArrayList<Process> processList = new ArrayList<Process>();
            int rowCount = Table.getRowCount();

            if (rowCount == 0) {
                JOptionPane.showMessageDialog(this, "No processes to display. Please add processes and run the algorithm first.");
                return;
            }

            for (int i = 0; i < rowCount; i++) {
                Process process = new Process();
                process.pid = Integer.parseInt(Table.getValueAt(i, 0).toString());
                process.arrival = Integer.parseInt(Table.getValueAt(i, 1).toString());
                process.burst = Integer.parseInt(Table.getValueAt(i, 2).toString());
                process.turnaround_time = Integer.parseInt(Table.getValueAt(i, 3).toString());
                process.waiting_time = Integer.parseInt(Table.getValueAt(i, 4).toString());
                process.respone_time = Integer.parseInt(Table.getValueAt(i, 5).toString());

                // For Gantt chart, we need to calculate finish times if they haven't been calculated
                if (process.finish == 0) {
                    process.finish = process.arrival + process.turnaround_time;
                }

                processList.add(process);
            }

            // Show the Gantt chart
            GanttChartPanel.showGanttChart(processList);
    }//GEN-LAST:event_ShowGanttChartButtonActionPerformed

    private void AddToTable() {
        model.addRow(new Object[]{ProcessId.getText(),ArrivalTime.getText(),BurstTime.getText(),0,0,0});
    }
   
    private void ClearFields(){
        ArrivalTime.setText("");
        BurstTime.setText("");
    }
    
    private void IncrementId() {
        int id = Integer.parseInt(ProcessId.getText());
        ProcessId.setText((++id)+"");
    }
    
    private double calculate_respone_times(ArrayList<Process> processlist) {
        for (int i = 0; i < processlist.size(); i++) {
            processlist.get(i).respone_time = processlist.get(i).start - processlist.get(i).arrival;
        }
        int sum = 0;
        for (int i = 0; i < processlist.size(); i++) {
            sum += processlist.get(i).respone_time;
        }
        return (double)sum / processlist.size();
    }

     private double calculate_turnaround_times(ArrayList<Process> processlist) {
        for (int i = 0; i < processlist.size(); i++) {
            processlist.get(i).turnaround_time = processlist.get(i).finish - processlist.get(i).arrival;
        }
        int sum = 0;
        for (int i = 0; i < processlist.size(); i++) {
            sum += processlist.get(i).turnaround_time;
        }
        return (double)sum / processlist.size();
    }

     private int calculate_waiting_times(ArrayList<Process> processlist) {
        for (int i = 0; i < processlist.size(); i++) {
            processlist.get(i).waiting_time = processlist.get(i).finish - processlist.get(i).arrival - processlist.get(i).burst;
        }
        return 0; 
    }
     
     private double calculate_average(ArrayList<Process> processlist) {
        int sum = 0;
        for (int i = 0; i < processlist.size() ; i++) {
            sum += processlist.get(i).waiting_time;
        }
        return (double)sum / processlist.size();
    }
    
     public static void SJFAlgo(ArrayList<Process> processlist) {
            int total_completed = 0;
            int current_time = 0;
            int min_remaining_time;
            int shortest;

            for(Process p : processlist) {
                p.remaining = p.burst;
                p.completed = 0;
                p.start = -1;
            }

            while (total_completed < processlist.size()) {
                min_remaining_time = Integer.MAX_VALUE;
                shortest = -1;
                for (int i = 0; i < processlist.size() ; i++) {
                    if (processlist.get(i).arrival <= current_time && processlist.get(i).completed == 0 && processlist.get(i).remaining < min_remaining_time) {
                        min_remaining_time = processlist.get(i).remaining;
                        shortest = i;
                    }
                }

                if (shortest == -1) {
                    current_time++;
                    continue;
                }

                if (processlist.get(shortest).start == -1) {
                    processlist.get(shortest).start = current_time;
                }

                processlist.get(shortest).remaining--;
                current_time++;

                if (processlist.get(shortest).remaining == 0) {
                    processlist.get(shortest).completed = 1;
                    processlist.get(shortest).finish = current_time;
                    total_completed++;
                }
            }
        }
            
     
    
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new HomeForm().setVisible(true);
        }
        });
    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddProcessInTable;
    private javax.swing.JTextField ArrivalTime;
    private javax.swing.JTextField BurstTime;
    private javax.swing.JButton Confirmnumber;
    private javax.swing.JPanel Left;
    private javax.swing.JTextField NumberofProcess;
    private javax.swing.JTextField ProcessId;
    private javax.swing.JPanel Right;
    private javax.swing.JButton RunAlgorithm;
    private javax.swing.JButton ShowGanttChartButton;
    private javax.swing.JTable Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
